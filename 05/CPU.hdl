// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:


    And(a=instruction[15], b=instruction[15], out=isC); // A命令か否かを判定 0がA命令 1がC命令
    // C命令の構成：1 xx a cccccc ddd jjj
    //                          543 210
    //                                
    Or16(a=instruction, b=instruction, out[0]=j3, out[1]=j2, out[2]=j1, out[3]=d3, out[4]=d2, out[5]=d1, out[6..11]=c, out[12]=a); // NOTE: falseで良いかは謎
    Mux16(a=Aout, b=inM, sel=a, out=ALUx); // HELP: AoutとinMが逆かも

    // ALUで計算フェイズ
    ALU(x=Dout, 
        y=ALUx, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f= instruction[7], 
        no=instruction[6], 
        out=hoge, 
        out=outALU, 
        zr=isZero, 
        ng=isNegative);

    // WriteMかどうか
    And(a=instruction[15], b=d3, out=writeM);

    // Dレジスタに格納するかいなか
    And(a=instruction[15], b=d2, out=writeD);
    DRegister(in=outALU, load=writeD, out=Dout); // Dレジスタ
    
    // Mの出力に関して
    Mux16(a=inM, b=hoge, sel=instruction[3], out=outM);

    // Aに格納する
    Not(in=isC, out=isA); // A命令ならtrue
    Mux16(a=outALU, b=instruction, sel=isA, out=resultForA);

    Not(in=instruction[15], out=loadA);
    Or(a=d1, b=loadA, out=loadToA);
    ARegister(in=resultForA, load=loadToA, out=Aout, out[0..14]=addressM); // Aレジスタ

    // ジャンプするか
    And(a=isNegative, b=j1, out=v1); // ALUの結果が負でかつ、j1が1の時(out<0がジャンプ条件の時)1
    And(a=isZero, b=j2, out=v2); // ALUの結果が0でかつ、j2が1の時(out=0がジャンプ条件の時)1

    Not(in=isZero, out=notZero);
    Not(in=isNegative, out=isPositive);
    And(a=notZero, b=isPositive, out=positive);
    And(a=positive, b=j3, out=v3); // ALUの結果が正でかつ、j2が1の時(out=0がジャンプ条件の時)1
    Or(a=v1, b=v2, out=v4);
    Or(a=v3, b=v4, out=isLoad);
    And(a=instruction[15], b=isLoad, out=fuga);
    PC(in=Aout, load=fuga, inc=true, reset=reset, out[0..14]=pc);
}